user root;
worker_processes auto;
worker_cpu_affinity auto;
thread_pool default threads=2 max_queue=50000;
worker_rlimit_nofile 300000;
pid /run/nginx.pid;
error_log /var/log/nginx/error.log;
load_module /usr/lib/nginx/modules/ngx_http_geoip_module.so;


events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

stream {
    include /etc/nginx/stream_conf.d/*.conf;
}


http {
    sendfile on;
    aio threads;
    directio 6m;
    tcp_nopush on;
    tcp_nodelay on;
    log_not_found off;
    server_tokens off;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 2M;
    client_body_buffer_size 512k;
    client_body_timeout 300s;
    reset_timedout_connection on;
    limit_req_zone $binary_remote_addr zone=global_rate_limit:50m rate=30r/s;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    log_format custom '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" "$http_x_forwarded_for" $request_time';
    access_log /var/log/nginx/access.log custom;
    log_format json_analytics escape=json '{'
                    '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
                    '"connection": "$connection", ' # connection serial number
                    '"connection_requests": "$connection_requests", ' # number of requests made in connection
                    '"pid": "$pid", ' # process pid
                    '"request_id": "$request_id", ' # the unique request id
                    '"request_length": "$request_length", ' # request length (including headers and body)
                    '"remote_addr": "$remote_addr", ' # client IP
                    '"remote_user": "$remote_user", ' # client HTTP username
                    '"remote_port": "$remote_port", ' # client port
                    '"time_local": "$time_local", '
                    '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
                    '"request": "$request", ' # full path no arguments if the request
                    '"request_uri": "$request_uri", ' # full path and arguments if the request
                    '"args": "$args", ' # args
                    '"status": "$status", ' # response status code
                    '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
                    '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
                    '"http_referer": "$http_referer", ' # HTTP referer
                    '"http_user_agent": "$http_user_agent", ' # user agent
                    '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
                    '"http_host": "$http_host", ' # the request Host: header
                    '"server_name": "$server_name", ' # the name of the vhost serving the request
                    '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
                    '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
                    '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
                    '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
                    '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
                    '"upstream_response_length": "$upstream_response_length", ' # upstream response length
                    '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
                    '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
                    '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
                    '"scheme": "$scheme", ' # http or https
                    '"request_method": "$request_method", ' # request method
                    '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
                    '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
                    '"gzip_ratio": "$gzip_ratio", '
                    '"http_cf_ray": "$http_cf_ray", '
                    '}';
    access_log /var/log/nginx/json_access.log json_analytics;
    error_log /var/log/nginx/error.log;
    gzip on;
    gzip_disable msie6;
    gzip_vary on;
    gzip_comp_level 3;
    gzip_min_length 256;
    gzip_buffers 16 8k;
    gzip_proxied any;
    gzip_types
    text/css
    text/plain
    text/javascript
    text/cache-manifest
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy
    application/javascript
    application/json
    application/x-javascript
    application/ld+json
    application/xml
    application/xml+rss
    application/xhtml+xml
    application/x-font-ttf
    application/x-font-opentype
    application/vnd.ms-fontobject
    application/manifest+json
    application/rss+xml
    application/atom_xml
    application/vnd.geo+json
    application/x-web-app-manifest+json
    image/svg+xml
    image/x-icon
    image/bmp
    font/opentype;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/ch_conf.d/*.conf;
    include /etc/nginx/global_conf.d/*.conf;
    include /etc/nginx/dev_ch_conf.d/*.conf;
}